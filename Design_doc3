        +---------------------------+
        |          E0-253           |
        | PROJECT 3: VIRTUAL MEMORY |
        |     DESIGN DOCUMENT       |
        +---------------------------+

---- GROUP ----

>> Fill in your name and email address.

 Mayank Gupta <mayankgupta@iisc.ac.in> SR No. 15165
 Prerna Arote <prernaarote@iisc.ac.in> SR No: 15230 
---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

      PAGE TABLE MANAGEMENT
      =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
file: vm/suppli.c
	struct lazy_page	//structure to store one of lazy pages be it mmapped or lazy load of executable
	{
		void* user_vaddr;  	//address of page to be loaded lazily
		uint32_t page_read_bytes;//num bytes to read
		uint32_t page_zero_bytes;//num bytes o later page to be zeroed
		size_t ofs;		//offset in file where to read from
		bool writable;		//whether the page is writable
		int mmap_id;		//mmap_id of the page if its a mapped page else -1 to find which file to load from
		struct list_elem elem;	//its a node in the list containing all such pages
	};
file:vm/frame.c
	struct frame_pool	//structure to store the list of frames to be allocated to user memory
	{
		uint8_t *base;	//base pointer to kernel vaddr from where user frame starts
		uint32_t **frame_table;	//array containing the pointers to the page table entries for the corresponding userspace addr
		uint32_t page_count;	//count of pages in user space
		struct lock lock;	//lock for accessing frame table
	};
	The list of this structure is per process and is saved in struct thread.
---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

	When a process starts, load() is called which records entries in the structure lazy_page the file to be loaded and offset in the file to start from and other details for each page. On page fault read_lazy_page() is called which scans the per process list of all lazy_pages and determines using fault_addr which page to load. In case of stack under given conditions a page is allocated.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

	The kernel accesses the user data from user address only and not from kernel address thus avoiding the issue altogether.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

	The lock in the frame_pool is used to allocate the frames and even read frame table thus avoiding races.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?
	
	The chosen data structures are easy to maintain as lists and arrays are the simplest and also works almost as well as some other structures. Only in the case of pagefault would it have to search through the list of lazy_pages and considering that page_faults are not so common due to spatial locality and temporal locality search time of list are not big overhead.

           PAGING TO AND FROM DISK
           =======================

	Tried doing it but were not able to make it work so the code for this is removed from the patch file.

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.
	
	


>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

       MEMORY MAPPED FILES
       ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

	struct lazy_page described above is used for this purpose also.	
	
---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

	For mmaped files an entry in lazy_page is kept per page of mapping and a frame for the faulting page is allocated on page fault.
	(Didn't implement but tried to implement the following way:) mmapped pages are evicted to files they were read from and not to swap region. This is done by maintaining bits in page table entry (9, 10 ,11) for identifying whether page is mmapped page or executable page or is the page swapped out.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.
	
	The pages required by a file are checked before deciding whether to map pages or not. In this way  call to overlapping address results in failure of the system call.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.
	
	yes, the mappings created with mmap is quite the same for all the purposes to lazy loading executables and infact both of situations are handled by the same code in my implementation. This helps in keeping the code shorter and more understandable. Also it makes the debugging process shorter as debugging for one also solves the same problem for another problem.

         SURVEY QUESTIONS
         ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

