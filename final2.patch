diff -Naur ./os-pintos_clean/pintos/src/devices/shutdown.c ./os-pintos-a2/pintos/src/devices/shutdown.c
--- ./os-pintos_clean/pintos/src/devices/shutdown.c	2018-03-08 10:03:33.203048698 +0530
+++ ./os-pintos-a2/pintos/src/devices/shutdown.c	2018-03-06 11:35:30.431949366 +0530
@@ -98,7 +98,7 @@
 
   printf ("Powering off...\n");
   serial_flush ();
-
+  outw(0xB004,0x2000);
   /* This is a special power-off sequence supported by Bochs and
      QEMU, but not by physical hardware. */
   for (p = s; *p != '\0'; p++)
diff -Naur ./os-pintos_clean/pintos/src/threads/thread.c ./os-pintos-a2/pintos/src/threads/thread.c
--- ./os-pintos_clean/pintos/src/threads/thread.c	2018-03-08 10:03:33.203048698 +0530
+++ ./os-pintos-a2/pintos/src/threads/thread.c	2018-03-08 07:35:42.327150888 +0530
@@ -11,6 +11,7 @@
 #include "threads/switch.h"
 #include "threads/synch.h"
 #include "threads/vaddr.h"
+#include "threads/malloc.h"
 #ifdef USERPROG
 #include "userprog/process.h"
 #endif
@@ -184,6 +185,18 @@
   init_thread (t, name, priority);
   tid = t->tid = allocate_tid ();
 
+#ifdef USERPROG
+  if(tid != TID_ERROR)// && thread_current() != initial_thread) 
+  {
+    struct child *c = malloc(sizeof(struct child));
+    c->tid = tid;
+    c->status = -2;
+    c->child_thread = t;
+    //printf("list length %d, calling thread %s\n", list_size(&(thread_current()->child_proc)),name);
+    list_push_front(&(thread_current()->child_proc), &(c->elem));
+ //   printf("Heres the eror\n");
+  }
+#endif
   /* Prepare thread for first run by initializing its stack.
      Do this atomically so intermediate values for the 'stack' 
      member cannot be observed. */
@@ -290,9 +303,6 @@
 {
   ASSERT (!intr_context ());
 
-#ifdef USERPROG
-  process_exit ();
-#endif
 
   /* Remove thread from all threads list, set our status to dying,
      and schedule another process.  That process will destroy us
@@ -470,6 +480,21 @@
   t->priority = priority;
   t->magic = THREAD_MAGIC;
   list_push_back (&all_list, &t->allelem);
+#ifdef USERPROG
+  if(t != initial_thread)
+  {
+    t->parent = thread_current();
+  }
+  list_init(&(t->open_files));
+  t->curr_fd = 1;
+  t->is_parent_alive = 1;
+  cond_init(&(t->exec_cond));
+  lock_init(&(t->exec_lock));
+  t->exec_complete = -2;
+  list_init(&(t->child_proc));
+  t->executable_file = NULL;
+//  printf("child list initialized thread %s\n",name);
+#endif
 }
 
 /* Allocates a SIZE-byte frame at the top of thread T's stack and
diff -Naur ./os-pintos_clean/pintos/src/threads/thread.h ./os-pintos-a2/pintos/src/threads/thread.h
--- ./os-pintos_clean/pintos/src/threads/thread.h	2018-03-08 10:03:33.203048698 +0530
+++ ./os-pintos-a2/pintos/src/threads/thread.h	2018-03-08 07:35:39.743150918 +0530
@@ -4,7 +4,7 @@
 #include <debug.h>
 #include <list.h>
 #include <stdint.h>
-
+#include "threads/synch.h"
 /* States in a thread's life cycle. */
 enum thread_status
   {
@@ -24,6 +24,14 @@
 #define PRI_DEFAULT 31                  /* Default priority. */
 #define PRI_MAX 63                      /* Highest priority. */
 
+struct child
+{
+  tid_t tid;
+  int status;
+  struct thread *child_thread;
+  struct list_elem elem;
+};
+
 /* A kernel thread or user process.
 
    Each thread structure is stored in its own 4 kB page.  The
@@ -96,6 +104,18 @@
 #ifdef USERPROG
     /* Owned by userprog/process.c. */
     uint32_t *pagedir;                  /* Page directory. */
+
+    struct list open_files;
+    int curr_fd;
+
+    struct condition exec_cond;
+    struct lock exec_lock;
+    int exec_complete;
+
+    struct file* executable_file;
+    bool is_parent_alive;
+    struct thread* parent;
+    struct list child_proc;
 #endif
 
     /* Owned by thread.c. */
diff -Naur ./os-pintos_clean/pintos/src/userprog/exception.c ./os-pintos-a2/pintos/src/userprog/exception.c
--- ./os-pintos_clean/pintos/src/userprog/exception.c	2018-03-08 10:03:33.203048698 +0530
+++ ./os-pintos-a2/pintos/src/userprog/exception.c	2018-03-08 07:15:59.623164512 +0530
@@ -1,4 +1,5 @@
 #include "userprog/exception.h"
+#include "userprog/syscall.h"
 #include <inttypes.h>
 #include <stdio.h>
 #include "userprog/gdt.h"
@@ -147,15 +148,21 @@
   not_present = (f->error_code & PF_P) == 0;
   write = (f->error_code & PF_W) != 0;
   user = (f->error_code & PF_U) != 0;
-
+  if(user)
+  {
+    endprocess(-1);
+  }
+  else
+  {
   /* To implement virtual memory, delete the rest of the function
      body, and replace it with code that brings in the page to
      which fault_addr refers. */
-  printf ("Page fault at %p: %s error %s page in %s context.\n",
+    printf ("Page fault at %p: %s error %s page in %s context.\n",
           fault_addr,
           not_present ? "not present" : "rights violation",
           write ? "writing" : "reading",
           user ? "user" : "kernel");
-  kill (f);
+    kill (f);
+  }
 }
 
diff -Naur ./os-pintos_clean/pintos/src/userprog/process.c ./os-pintos-a2/pintos/src/userprog/process.c
--- ./os-pintos_clean/pintos/src/userprog/process.c	2018-03-08 10:03:33.203048698 +0530
+++ ./os-pintos-a2/pintos/src/userprog/process.c	2018-03-08 08:27:12.879115286 +0530
@@ -8,6 +8,7 @@
 #include "userprog/gdt.h"
 #include "userprog/pagedir.h"
 #include "userprog/tss.h"
+#include "userprog/syscall.h"
 #include "filesys/directory.h"
 #include "filesys/file.h"
 #include "filesys/filesys.h"
@@ -17,6 +18,7 @@
 #include "threads/palloc.h"
 #include "threads/thread.h"
 #include "threads/vaddr.h"
+#include "threads/malloc.h"
 
 static thread_func start_process NO_RETURN;
 static bool load (const char *cmdline, void (**eip) (void), void **esp);
@@ -30,7 +32,6 @@
 {
   char *fn_copy;
   tid_t tid;
-
   /* Make a copy of FILE_NAME.
      Otherwise there's a race between the caller and load(). */
   fn_copy = palloc_get_page (0);
@@ -53,19 +54,79 @@
   char *file_name = file_name_;
   struct intr_frame if_;
   bool success;
-
   /* Initialize interrupt frame and load executable. */
   memset (&if_, 0, sizeof if_);
   if_.gs = if_.fs = if_.es = if_.ds = if_.ss = SEL_UDSEG;
   if_.cs = SEL_UCSEG;
   if_.eflags = FLAG_IF | FLAG_MBS;
+//get only the name of file from given file_name
+ char *token, *save_ptr;
+ token = strtok_r (file_name, " \n", &save_ptr);
+ 	lock_acquire(&(filesys_lock));
   success = load (file_name, &if_.eip, &if_.esp);
+  lock_release(&(filesys_lock));
+/* Function args code start */
+//get all words the from the file_name
+  int num_args = 0;
+
+  char *next_word = (char*)if_.esp - strnlen(token, PGSIZE) -1;
+  char **vec_args = (char*)if_.esp - PGSIZE;
+
+  success = success && (next_word >=  vec_args + num_args+1 + 3);
+  while(success)
+  {
+  	strlcpy(next_word, token, strnlen(token, PGSIZE)+1);
+  	vec_args[num_args] = next_word;
+  	num_args++;
+  	token = strtok_r (NULL, " \n", &save_ptr);
+  	
+  	if(token == NULL)
+  		break;
+  	else
+  		next_word -= (strnlen(token, PGSIZE) +1);
+  	
+  	success = next_word >= vec_args + num_args+1 + 4; //check for next_word writing over vec_args, 3 for argv, argc, ret_addr
+  }
 
-  /* If load failed, quit. */
+  /* If load failed, quit notifing parent. */
+  if(!success)
+  {
+  	palloc_free_page (file_name);
+  	process_exit(-1);
+  	struct thread *cur = thread_current();
+  	lock_acquire(&(cur->parent->exec_lock));
+  	cur->parent->exec_complete = -1;
+  	cond_signal(&(cur->parent->exec_cond),&(cur->parent->exec_lock));
+  	lock_release(&(cur->parent->exec_lock));
+  	thread_exit ();
+  }
+  
+  while(((unsigned int)next_word)%4 != 0) // align with 4B
+  {
+  	*(--next_word) = 0;
+
+  }
+  next_word = ((char**)next_word) - 1;
+  *(next_word) = NULL;
+  next_word = (char**)next_word - num_args;
+  memmove( next_word, vec_args, sizeof(char*)*num_args);
+  *((char**)next_word-1) = next_word;
+  *((char**)next_word-2) = num_args; //as int is of same size as a char pointer
+  *((char**)next_word-3) = NULL;
+  if_.esp = (char**)next_word-3;
+ 	
+ 	struct thread *cur = thread_current();
+  cur->executable_file = filesys_open (file_name);
+  file_deny_write(cur->executable_file);
+  
   palloc_free_page (file_name);
-  if (!success) 
-    thread_exit ();
+  
+  lock_acquire(&(cur->parent->exec_lock));
+  cur->parent->exec_complete = 0;
+  cond_signal(&(cur->parent->exec_cond),&(cur->parent->exec_lock));
+  lock_release(&(cur->parent->exec_lock));
 
+//  printf("i am here\n");
   /* Start the user process by simulating a return from an
      interrupt, implemented by intr_exit (in
      threads/intr-stubs.S).  Because intr_exit takes all of its
@@ -86,16 +147,62 @@
    This function will be implemented in problem 2-2.  For now, it
    does nothing. */
 int
-process_wait (tid_t child_tid UNUSED) 
+process_wait (tid_t child_tid )//UNUSED) //ono-to-one mapping between tid and pid
 {
-  return -1;
+
+	struct list_elem *e;
+	struct thread *t = thread_current();
+	struct child *c = NULL;
+  for (e = list_begin (&(t->child_proc)); e != list_end (&(t->child_proc)); e = list_next (e))
+  {
+    
+    if(list_entry (e, struct child, elem)->tid == child_tid)
+    	c = list_entry (e, struct child, elem);
+  }
+  if(c == NULL)
+  {
+  	return -1;
+  }
+  while(c->status == -2)
+  {
+  	thread_yield();
+  }
+  int status = c->status;
+  list_remove(&(c->elem));
+  free(c);
+   return status;
 }
 
 /* Free the current process's resources. */
 void
-process_exit (void)
+process_exit (int status)
 {
   struct thread *cur = thread_current ();
+	struct list_elem *e;
+	for (e = list_begin (&(cur->child_proc)); e != list_end (&(cur->child_proc));)
+  {
+    struct child *c = list_entry (e, struct child, elem);
+    c->child_thread->is_parent_alive = 0;
+    e = list_next (e);
+    free(c);
+  }
+
+	if(cur->is_parent_alive)
+	{
+		struct list *siblings = &(cur->parent->child_proc);
+		for(e = list_begin(siblings); e != list_end(siblings); e = list_next(e))
+		{
+			struct child *c = list_entry(e, struct child, elem);
+			if(c->tid == cur->tid)
+				c->status = status;
+		}
+	}
+	if(cur->executable_file != NULL)
+	  {
+	  	file_allow_write (cur->executable_file);
+			file_close (cur->executable_file);
+		}
+
   uint32_t *pd;
 
   /* Destroy the current process's page directory and switch back
@@ -437,7 +544,9 @@
     {
       success = install_page (((uint8_t *) PHYS_BASE) - PGSIZE, kpage, true);
       if (success)
-        *esp = PHYS_BASE;
+        {
+        	*esp = PHYS_BASE;
+        }
       else
         palloc_free_page (kpage);
     }
diff -Naur ./os-pintos_clean/pintos/src/userprog/process.h ./os-pintos-a2/pintos/src/userprog/process.h
--- ./os-pintos_clean/pintos/src/userprog/process.h	2018-03-08 10:03:33.203048698 +0530
+++ ./os-pintos-a2/pintos/src/userprog/process.h	2018-03-08 03:47:06.187308894 +0530
@@ -5,7 +5,7 @@
 
 tid_t process_execute (const char *file_name);
 int process_wait (tid_t);
-void process_exit (void);
+void process_exit (int status);
 void process_activate (void);
 
 #endif /* userprog/process.h */
diff -Naur ./os-pintos_clean/pintos/src/userprog/syscall.c ./os-pintos-a2/pintos/src/userprog/syscall.c
--- ./os-pintos_clean/pintos/src/userprog/syscall.c	2018-03-08 10:03:33.203048698 +0530
+++ ./os-pintos-a2/pintos/src/userprog/syscall.c	2018-03-08 10:04:44.551047876 +0530
@@ -3,18 +3,372 @@
 #include <syscall-nr.h>
 #include "threads/interrupt.h"
 #include "threads/thread.h"
+#include "threads/synch.h"
+#include "devices/input.h"
+#include "devices/shutdown.h"
+#include "filesys/filesys.h"
+#include "filesys/file.h"
+#include "threads/malloc.h"
+#include "threads/vaddr.h"
+#include "userprog/pagedir.h"
+#include "userprog/process.h"
+#include <list.h>
+#include <string.h>
 
 static void syscall_handler (struct intr_frame *);
 
+struct lock filesys_lock;
+
+static void check_address(void* );
+
+int add_file(struct file* f_ptr);
+static struct file* get_file(int fd);
+static struct file * remove_file(int fd);
+static int exec_file(char* filename);
 void
 syscall_init (void) 
 {
+	lock_init(&filesys_lock);
   intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
 }
 
+struct file_desc
+{
+	struct file* file_ptr;
+	int fd;
+	struct list_elem elem;
+};
+
 static void
-syscall_handler (struct intr_frame *f UNUSED) 
+syscall_handler (struct intr_frame *f )//UNUSED) 
+{
+  uint32_t* u_esp = f->esp;
+  int call_num;
+  check_address((void*)u_esp);
+  call_num = *u_esp;
+
+  struct file *f_ptr = NULL;
+  char *f_name = NULL;
+  int fd = -1;
+  char* buffer= NULL;
+  int buff_size = 0;
+  int i = -1;
+  int ret = 0;
+  int status = -1;
+  int tid = 0;
+//  printf("syscall_handler clled with call=%d\n",call_num);
+  switch(call_num)
+  {
+
+	case SYS_HALT:
+		shutdown_power_off();
+		NOT_REACHED();
+		break;
+
+  case SYS_EXIT:
+		check_address((void*)(++u_esp));
+  	status = *(u_esp);
+  	endprocess(status);
+
+  	break;
+
+  case SYS_EXEC:
+  	check_address((void*)(u_esp+1));
+  	f_name = *((char**)(u_esp+1));
+  	for(i = 0;i<14;++i)
+  	{
+  		check_address((void*)(f_name+i));
+  		if(f_name[i] == '\0')
+  			break;
+  		i++;
+  	}
+  	f->eax = exec_file( f_name);
+  	
+  	break;
+
+  case SYS_WAIT:
+		check_address((void*)(++u_esp));
+  	tid = *(u_esp);
+  	f->eax = process_wait(tid);
+  	break;
+
+  case SYS_CREATE:
+  	check_address((void*)(u_esp+4));
+  	f_name = *((char**)(u_esp+4));
+  	check_address((void*)(u_esp+5));
+  	int init_size = *(u_esp+5);
+  	for(i = 0;i<14;++i)
+  	{
+  		check_address((void*)(f_name+i));
+  		if(f_name[i] == '\0')
+  			break;
+  		i++;
+  	}
+
+  	lock_acquire(&filesys_lock);
+  	f->eax = filesys_create(f_name, init_size);
+  	lock_release(&filesys_lock);
+
+  	break;
+
+  case SYS_REMOVE:
+		check_address((void*)(u_esp+1));
+  	f_name = *((char**)(u_esp+1));
+  	
+  	for(i = 0;i<14;++i)
+  	{
+  		check_address((void*)(f_name+i));
+  		if(f_name[i] == '\0')
+  			break;
+  	}
+  	lock_acquire(&filesys_lock);
+  	f->eax = filesys_remove(f_name);//succes is return value
+  	lock_release(&filesys_lock);
+  	break;
+
+  case SYS_OPEN:
+  	check_address((void*)(++u_esp));
+  	f_name = *((char**)u_esp);
+  	for(i = 0;i<14;++i)
+  	{
+  		check_address((void*)(f_name+i));
+  		if(f_name[i] == '\0')
+  			break;
+  	}
+  	if (i == 0)
+  		f->eax =  -1;	
+  	lock_acquire(&filesys_lock);
+  	f_ptr = filesys_open(f_name);
+  	lock_release(&filesys_lock);
+  	f->eax = add_file(f_ptr);
+  	break;
+
+  case SYS_FILESIZE:
+  	check_address((void*)(++u_esp));
+  	fd = *(u_esp);
+  	f_ptr = get_file(fd);
+  	ret = -1;
+  	if(f_ptr != NULL)
+  	{
+  		lock_acquire(&filesys_lock);
+  		ret = file_length(f_ptr);
+	  	lock_release(&filesys_lock);
+  	}
+  	f->eax =  ret;
+  	break;
+  case SYS_READ:
+  	check_address((void*)(u_esp+5));
+  	fd = *(u_esp+5);
+  	check_address((void*)(u_esp+6));
+  	buffer = *((char**)(u_esp+6));
+  	check_address((void*)(u_esp+7));
+  	buff_size = *(u_esp+7);
+  	for(i = 0; i<buff_size; i++)
+  	{
+  		check_address((void*)(buffer+i));
+  	}
+  	int bytes_read = -1;
+  	if(fd>1)
+  	{
+  		f_ptr = get_file(fd);
+  		if(f_ptr != NULL)
+  		{
+  			lock_acquire(&filesys_lock);
+  			bytes_read = file_read (f_ptr, buffer, buff_size);
+  			lock_release(&filesys_lock);
+  		}
+  	}
+  	else if(fd == 0)
+  	{
+  		for(i = 0; i<buff_size; i++)
+  		{
+  			buffer[i] = input_getc();
+  		}
+  		bytes_read = buff_size;
+  	}
+  	f->eax =  bytes_read;
+  	break;
+
+  case SYS_WRITE:
+  	check_address((void*)(u_esp+5));
+  	fd = *(u_esp+5);
+  	check_address((void*)(u_esp+6));
+  	buffer = *((char**)(u_esp+6));
+  	check_address((void*)(u_esp+7));
+  	buff_size = *(u_esp+7);
+  	for(i = 0; i<buff_size; i++)
+  	{
+  		check_address((void*)(buffer+i));
+  	}
+  	int bytes_writn=-1;
+//  	printf("fd=%d, str=%d, size=%d, u_esp=%x, u_esp+1=%x, u_esp+2=%x\n", fd, buffer, buff_size,u_esp,u_esp+1,u_esp+2);
+  	if(fd>1)
+  	{
+  		f_ptr = get_file(fd);
+  		if(f_ptr != NULL)
+  		{
+  			lock_acquire(&filesys_lock);
+  			bytes_writn = file_write (f_ptr, buffer, buff_size);
+  			lock_release(&filesys_lock);
+  		}
+  	}
+  	else if(fd == 1)
+  	{
+  		putbuf(buffer, buff_size);
+  		bytes_writn = buff_size;
+  	}
+
+  	f->eax =  bytes_writn;
+  	break;
+
+  case SYS_SEEK:
+  	check_address((void*)(u_esp+4));
+  	fd = *(u_esp+4);
+  	check_address((void*)(u_esp+5));
+  	i = *(u_esp+5);		//i is offset position
+  	f_ptr = get_file(fd);
+  	if(f_ptr != NULL)
+  	{
+  		lock_acquire(&filesys_lock);
+  		file_seek (f_ptr, i);
+  		lock_release(&filesys_lock);
+  	}
+
+  	break;
+
+  case SYS_TELL:
+  	check_address((void*)(++u_esp));
+  	fd = *(u_esp);
+  	f_ptr = get_file(fd);
+  	ret = -1;
+  	if(f_ptr != NULL)
+  	{
+  		lock_acquire(&filesys_lock);
+  		ret = file_tell (f_ptr);
+  		lock_release(&filesys_lock);
+  	}
+  	f->eax =  ret;
+  	break;
+
+  case SYS_CLOSE:
+  	check_address((void*)(++u_esp));
+  	fd = *(u_esp);
+  	f_ptr = remove_file(fd);
+  	if(f_ptr != NULL)
+  	{
+  		lock_acquire(&filesys_lock);
+  		file_close(f_ptr);
+  		lock_release(&filesys_lock);
+  	}
+  	break;
+  default:
+    printf ("Invalid system call!\n");
+  	break;
+  }
+
+//  printf ("system call!\n");
+//  thread_exit ();
+}
+
+void check_address(void* user_vaddr)
+{
+	if( !is_user_vaddr(user_vaddr) || !pagedir_get_page(thread_current()->pagedir, user_vaddr) )
+	{
+//		printf("User passed wrong vaddr in syscall !!!\n");
+		endprocess(-1);
+	}
+}
+
+void endprocess(int status)		//todo: two child exits simultaneously - a problem
+{
+	struct thread *cur = thread_current();
+	struct list_elem *e;
+	for (e = list_begin (&(cur->open_files)); e != list_end (&(cur->open_files));)
+  {
+    struct file_desc *f = list_entry (e, struct file_desc, elem);
+    lock_acquire(&filesys_lock);
+  	file_close(f->file_ptr);
+  	lock_release(&filesys_lock);
+  	e = list_next (e);
+  	free(f);
+  }
+  char *token, *save_ptr;
+  token = strtok_r (cur->name, " \n", &save_ptr);
+  printf("%s: exit(%d)\n",token,status);
+	process_exit(status);
+	thread_exit();
+}
+
+int add_file(struct file* f_ptr)
+{
+	int fd = -1;
+	if(f_ptr != NULL)
+	{
+		struct thread *t = thread_current();
+		struct file_desc *p = malloc(sizeof(struct file_desc));
+		p->file_ptr = f_ptr;
+		fd = p->fd = ++(t->curr_fd);
+		list_push_back(&(t->open_files), &(p->elem));
+	}
+	return fd;
+}
+
+struct file * get_file(int fd)
+{
+	struct thread *t = thread_current();
+	struct file *f_ptr = NULL;
+	struct list_elem *e;
+  for (e = list_begin (&(t->open_files)); e != list_end (&(t->open_files)); e = list_next(e))
+  {
+    struct file_desc *f = list_entry(e, struct file_desc, elem);
+//    printf("%x\n",f);
+    if(fd == f->fd)
+    {
+    	f_ptr = f->file_ptr;
+    	break;
+    }
+  }
+  return f_ptr;
+}
+
+struct file * remove_file(int fd)
+{
+	struct thread *t = thread_current();
+	struct file *f_ptr = NULL;
+	struct list_elem *e;
+  for (e = list_begin (&(t->open_files)); e != list_end (&(t->open_files)); e = list_next(e))
+  {
+    struct file_desc *f = list_entry (e, struct file_desc, elem);
+    if(fd == f->fd)
+    {
+    	f_ptr = f->file_ptr;
+    	list_remove (e);
+    	free(f);
+    	break;
+    }
+  }
+  return f_ptr;
+}
+int exec_file(char* filename)
 {
-  printf ("system call!\n");
-  thread_exit ();
+	struct thread *cur = thread_current(); 
+	
+	lock_acquire(&(cur->exec_lock));
+  int pid = process_execute(filename);
+  while(cur->exec_complete == -2)
+  {
+  	cond_wait(&(cur->exec_cond),&(cur->exec_lock));
+  }
+  int status = cur->exec_complete;
+  cur->exec_complete = -2;
+  lock_release(&(cur->exec_lock));
+  if(status == -1)
+  {
+  	return -1;
+  }
+  if(status == 0)
+  {
+  	return pid;
+  }
+  return -1;
 }
diff -Naur ./os-pintos_clean/pintos/src/userprog/syscall.h ./os-pintos-a2/pintos/src/userprog/syscall.h
--- ./os-pintos_clean/pintos/src/userprog/syscall.h	2018-03-08 10:03:33.203048698 +0530
+++ ./os-pintos-a2/pintos/src/userprog/syscall.h	2018-03-08 07:14:05.307165829 +0530
@@ -3,4 +3,6 @@
 
 void syscall_init (void);
 
+extern struct lock filesys_lock;
+void endprocess(int status);
 #endif /* userprog/syscall.h */
